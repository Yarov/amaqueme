---
// Componente para mostrar un carrusel de posts destacados
import { getFeaturedPostsWithImages } from "../lib/wordpress";
import { getPostImage } from '../utils/getPostImage';
import { getReadingTime } from '../utils/readingTime';

// Obtener posts con imágenes destacadas
const featuredPosts = await getFeaturedPostsWithImages();

// Debug para verificar la estructura de los posts
console.log(`Found ${featuredPosts.length} posts with featured images`);
if (featuredPosts.length > 0) {
  const firstPost = featuredPosts[0];
  console.log('Sample post structure:', {
    title: firstPost.title,
    hasFeaturedImage: !!firstPost.featuredImage?.node?.sourceUrl,
    contentLength: firstPost.content?.length || 0,
    imageFromContent: getPostImage(firstPost).url
  });
}
---

<div class="featured-carousel relative overflow-hidden rounded-3xl mb-12 h-[500px] md:h-[600px] bg-gray-50 dark:bg-gray-900">
  {featuredPosts.length > 0 ? (
    <>
      <div class="carousel-container flex transition-transform duration-700 ease-out h-full" id="carousel-container">
        {featuredPosts.map((post, index) => (
          <div class="carousel-slide flex-shrink-0 w-full h-full relative group" id={`slide-${index}`}>
            <img
              src={getPostImage(post).url}
              alt={getPostImage(post).alt}
              class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-105"
            />
            <div class="absolute inset-0 bg-gradient-to-t from-black/90 via-black/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500 flex flex-col justify-end p-8 md:p-12">
              {post.categories?.nodes && post.categories.nodes.length > 0 && (
                <div class="flex flex-wrap gap-2 mb-4">
                  {post.categories.nodes.slice(0, 1).map((category) => (
                    <a
                      href={`/categoria/${category.slug}`}
                      class="text-xs md:text-sm font-medium bg-white/10 backdrop-blur-sm text-white px-4 py-1.5 rounded-full hover:bg-white/20 transition-colors"
                    >
                      {category.name}
                    </a>
                  ))}
                </div>
              )}
              <h3 class="text-3xl md:text-5xl font-bold text-white mb-6 leading-tight transform translate-y-4 group-hover:translate-y-0 transition-transform duration-500">
                <a href={`/${post.slug}`} class="hover:underline decoration-white/50 decoration-2 underline-offset-4">
                  {post.title}
                </a>
              </h3>
              <div class="flex flex-wrap gap-6 mb-6 text-white/80 text-sm transform translate-y-4 group-hover:translate-y-0 transition-transform duration-500 delay-100">
                <div class="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <time datetime={post.date}>
                    {new Date(post.date).toLocaleDateString('es-MX', {
                      year: 'numeric',
                      month: 'short',
                      day: 'numeric',
                    })}
                  </time>
                </div>
                <div class="flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span>{getReadingTime(post.content)} min lectura</span>
                </div>
              </div>
              <p class="text-white/90 text-base md:text-lg line-clamp-2 mb-8 max-w-3xl transform translate-y-4 group-hover:translate-y-0 transition-transform duration-500 delay-200" set:html={post.excerpt} />
              <a
                href={`/${post.slug}`}
                class="inline-flex items-center bg-white/10 backdrop-blur-sm hover:bg-white/20 text-white px-6 py-3 rounded-xl font-medium transition-all group transform translate-y-4 group-hover:translate-y-0 duration-500 delay-300"
              >
                <span>Leer artículo</span>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2 group-hover:translate-x-1 transition-transform" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              </a>
            </div>
          </div>
        ))}
      </div>

      <!-- Navigation Arrows -->
      <button
        id="prevButton"
        class="absolute left-6 top-1/2 -translate-y-1/2 bg-black/30 hover:bg-black/50 backdrop-blur-sm text-white p-4 rounded-full transition-all z-10 group opacity-0 hover:opacity-100"
        aria-label="Anterior"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="2"
          stroke="currentColor"
          class="w-6 h-6 group-hover:-translate-x-0.5 transition-transform"
        >
          <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5"></path>
        </svg>
      </button>
      <button
        id="nextButton"
        class="absolute right-6 top-1/2 -translate-y-1/2 bg-black/30 hover:bg-black/50 backdrop-blur-sm text-white p-4 rounded-full transition-all z-10 group opacity-0 hover:opacity-100"
        aria-label="Siguiente"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="2"
          stroke="currentColor"
          class="w-6 h-6 group-hover:translate-x-0.5 transition-transform"
        >
          <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5"></path>
        </svg>
      </button>

      <!-- Indicators -->
      <div class="absolute bottom-8 left-0 right-0 flex justify-center gap-3 z-10">
        {featuredPosts.map((_, index) => (
          <button
            class="carousel-indicator w-3 h-3 rounded-full transition-all duration-300 border border-white/50 hover:scale-125"
            data-index={index}
            aria-label={`Ir a la diapositiva ${index + 1}`}
          />
        ))}
      </div>
    </>
  ) : (
    <div class="flex items-center justify-center h-full bg-gray-100 dark:bg-gray-800">
      <div class="text-center p-8">
        <svg class="w-16 h-16 mx-auto text-primary mb-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
          <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
        </svg>
        <h3 class="text-xl font-bold text-gray-800 dark:text-white mb-2">No hay imágenes destacadas</h3>
        <p class="text-gray-600 dark:text-gray-300">Agrega imágenes destacadas a tus posts en WordPress para que aparezcan en este carrusel.</p>
      </div>
    </div>
  )}
</div>

<style>
  .carousel-indicator {
    background-color: rgba(255, 255, 255, 0.4);
  }
  .carousel-indicator[data-active="true"] {
    background-color: white;
    transform: scale(1.25);
    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.5);
  }
</style>

<script>
  // Carrusel autoplay y controles
  document.addEventListener("DOMContentLoaded", () => {
    // Elementos del carrusel
    const container = document.getElementById("carousel-container");
    const slides = document.querySelectorAll(".carousel-slide");
    const prevButton = document.getElementById("prevButton");
    const nextButton = document.getElementById("nextButton");
    const indicators = document.querySelectorAll(".carousel-indicator");

    if (!container || slides.length === 0) return;

    let currentIndex = 0;
    const slideCount = slides.length;
    let autoplayInterval;
    let isTransitioning = false;

    // Función para actualizar el carrusel
    const updateCarousel = (index) => {
      if (isTransitioning) return;
      isTransitioning = true;

      // Validar el índice
      if (index < 0) index = slideCount - 1;
      if (index >= slideCount) index = 0;

      currentIndex = index;

      // Mover el contenedor con una transición suave
      container.style.transform = `translateX(-${currentIndex * 100}%)`;

      // Actualizar indicadores
      indicators.forEach((indicator, i) => {
        if (i === currentIndex) {
          indicator.setAttribute("data-active", "true");
        } else {
          indicator.removeAttribute("data-active");
        }
      });

      // Resetear el estado de transición después de la animación
      setTimeout(() => {
        isTransitioning = false;
      }, 700);
    };

    // Inicializar el carrusel
    const initCarousel = () => {
      // Configurar el ancho de cada slide
      slides.forEach((slide) => {
        slide.style.width = "100%";
      });

      // Activar el autoplay
      startAutoplay();

      // Añadir event listeners a los botones
      prevButton?.addEventListener("click", () => {
        stopAutoplay();
        updateCarousel(currentIndex - 1);
        startAutoplay();
      });

      nextButton?.addEventListener("click", () => {
        stopAutoplay();
        updateCarousel(currentIndex + 1);
        startAutoplay();
      });

      // Event listeners para los indicadores
      indicators.forEach((indicator, index) => {
        indicator.addEventListener("click", () => {
          stopAutoplay();
          updateCarousel(index);
          startAutoplay();
        });
      });

      // Pausar autoplay al hacer hover sobre el carrusel
      container.parentElement.addEventListener("mouseenter", stopAutoplay);
      container.parentElement.addEventListener("mouseleave", startAutoplay);

      // Soporte para gestos táctiles
      let touchStartX = 0;
      let touchEndX = 0;

      container.parentElement.addEventListener('touchstart', (e) => {
        touchStartX = e.changedTouches[0].screenX;
      }, { passive: true });

      container.parentElement.addEventListener('touchend', (e) => {
        touchEndX = e.changedTouches[0].screenX;
        handleSwipe();
      }, { passive: true });

      const handleSwipe = () => {
        const swipeThreshold = 50;
        const diff = touchStartX - touchEndX;

        if (Math.abs(diff) > swipeThreshold) {
          if (diff > 0) {
            // Swipe izquierda
            updateCarousel(currentIndex + 1);
          } else {
            // Swipe derecha
            updateCarousel(currentIndex - 1);
          }
        }
      };
    };

    // Iniciar autoplay
    const startAutoplay = () => {
      stopAutoplay(); // Limpiar intervalo anterior
      autoplayInterval = setInterval(() => {
        updateCarousel(currentIndex + 1);
      }, 6000); // Cambiar slide cada 6 segundos
    };

    // Detener autoplay
    const stopAutoplay = () => {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
      }
    };

    // Inicializar
    initCarousel();
    updateCarousel(0);
  });
</script>
